C51 COMPILER V9.53.0.0   INTERRUPTS                                                        03/21/2017 23:21:44 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src\Interrupts.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Ali Rah
                    -man\SimplicityStudio\v4_workspace\EFM8BB3_DAC_2\src\Interrupts.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2
                    -) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Ali Rahman\SimplicityStud
                    -io\v4_workspace\EFM8BB3_DAC_2\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/shared/si8051bas
                    -e;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\src\Interrupts.lst) COND PA
                    -GEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Interrupts.OBJ)

line level    source

   1          //=========================================================
   2          // src/Interrupts.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9                   
  10          // USER INCLUDES                        
  11          #include <SI_EFM8BB3_Register_Enums.h>
  12          #include "bsp.h"
  13          #include <stdio.h>
  14          #include "joystick.h"
  15          //#include "nav_up.h"
  16          //#include "nav_down.h"
  17          //#include "nav_left.h"
  18          //#include "nav_right.h"
  19          
  20          
  21          //FrequencySet
  22          #define Supported_Num_Freq 10
  23          //PresetFrequencies
  24          static uint16_t frequencies[Supported_Num_Freq] = {
  25                          10L,
  26                          20L,
  27                          30L,
  28                          40L,
  29                          50L,
  30                          60L,
  31                          70L,
  32                          80L,
  33                          90L,
  34                          100L
  35          };
  36          
  37          static uint8_t FREQUENCY = 5;
  38          
  39          
  40          //FrequencySelect
  41          static void FrequencySelect(uint8_t dir)
  42          {
  43   1                      if (dir == JOYSTICK_N)
  44   1              {
  45   2                      if(FREQUENCY == Supported_Num_Freq-1)
  46   2                      {
  47   3                              FREQUENCY = 0;
  48   3                      }
  49   2                              else
  50   2      
  51   2                      {
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        03/21/2017 23:21:44 PAGE 2   

  52   3                              FREQUENCY++;
  53   3                      }
  54   2              }
  55   1                      else if (dir == JOYSTICK_S)
  56   1                      {
  57   2                              if (FREQUENCY == 0)
  58   2                              {
  59   3                                      FREQUENCY = Supported_Num_Freq-1;
  60   3                              }
  61   2                              else
  62   2                              {
  63   3                                      FREQUENCY--;
  64   3                              }
  65   2                      }
  66   1      
  67   1      }
  68          
  69          
  70          // getJoystick
  71          
  72          static uint8_t getJoystick(void)
  73          {
  74   1        uint32_t mv;
  75   1        uint8_t dir;
  76   1        ADC0CN0_ADBUSY = 1;
  77   1        while (!ADC0CN0_ADINT);
  78   1        ADC0CN0_ADINT = 0;
  79   1        mv = ((uint32_t)ADC0) * 3300 / 1024;
  80   1        dir = JOYSTICK_convert_mv_to_direction(mv);
  81   1      
  82   1        return dir;
  83   1      }
  84          
  85          // getWaitJoystick
  86          // Get joystick input If joystick was moved, wait for release
  87          
  88          static uint8_t getWaitJoystick(void)
  89          {
  90   1        uint8_t dir, dirSave;
  91   1        dir = getJoystick();
  92   1        dirSave = dir;
  93   1        while (dir != JOYSTICK_NONE)
  94   1        {
  95   2          dir = getJoystick();
  96   2        }
  97   1        return dirSave;
  98   1      }
  99          
 100          //getJoystickWave
 101          static void ProcessInput(uint8_t dir)
 102          {
 103   1              if ((dir == JOYSTICK_N || dir == JOYSTICK_S))
 104   1              {
 105   2                      //FreqencySelect(dir)
 106   2              }
 107   1      }
 108          
 109          
 110          //-----------------------------------------------------------------------------
 111          // Global Constants
 112          //-----------------------------------------------------------------------------
 113          SI_SBIT(LED0, SFR_P1, 4);                  // P1.4 LED0
 114          SI_SBIT(LED1, SFR_P1, 5);                  // P1.5 LED1
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        03/21/2017 23:21:44 PAGE 3   

 115          SI_SBIT(LED2, SFR_P1, 6);                  // P1.6 LED2
 116          
 117          #define SYSCLK          24500000       // SYSCLK frequency in Hz
 118          
 119          #define SAMPLE_RATE_DAC 200000L        // DAC sampling rate in Hz
 120          
 121          #define PHASE_PRECISION 65536          // Range of phase accumulator
 122          
 123          #define PHASE_ADD       (FREQUENCY * PHASE_PRECISION / SAMPLE_RATE_DAC)
 124          
 125          // A full cycle, 12-bit, unsigned square wave lookup table
 126          SI_SEGMENT_VARIABLE(SQUARE_TABLE[256], uint16_t, const SI_SEG_CODE) =
 127          {
 128                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 129                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 130                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF,
 131                            0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00,
 132                            0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
 133                            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
 134                            0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
 135                            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
 136                            0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08,
 137                            0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
 138                            0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
 139                            0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
 140                            0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
 141                            0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
 142                            0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
 143                            0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
 144                            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
 145                            0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
 146                            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
 147                            0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08,
 148                            0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
 149                            0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
 150                            0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
 151                            0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
 152                            0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
 153                            0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
 154                            0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
 155                            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
 156                            0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
 157                            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
 158                            0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08,
 159                            0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
 160          };
 161          
 162          //-----------------------------------------------------------------------------
 163          // TIMER3_ISR
 164          //-----------------------------------------------------------------------------
 165          //
 166          // TIMER3 ISR Content goes here. Remember to clear flag bits:
 167          // TMR3CN::TF2H (Timer # High Byte Overflow Flag)
 168          // TMR3CN::TF2L (Timer # Low Byte Overflow Flag)
 169          //
 170          // This routine changes the state of the LED whenever Timer3 overflows.
 171          //
 172          //-----------------------------------------------------------------------------
 173          
 174          SI_INTERRUPT (TIMER3_ISR, TIMER3_IRQn)
 175          {
 176   1         uint8_t SFRPAGE_save = SFRPAGE;
 177   1      
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        03/21/2017 23:21:44 PAGE 4   

 178   1         static uint16_t phase_acc = 0;      // Holds phase accumulator
 179   1      
 180   1         SI_UU16_t temp;                     // The temporary value that holds
 181   1                                                                                 // value before being written
 182   1                                                                                 // to the IDAC
 183   1      
 184   1         SI_VARIABLE_SEGMENT_POINTER(table_ptr, uint16_t, const SI_SEG_CODE);  // Pointer to the lookup table
 185   1      
 186   1      
 187   1         TMR3CN0 &= ~0x80;                   // Clear Timer3 overflow flag
 188   1      
 189   1         table_ptr = SQUARE_TABLE;
 190   1      
 191   1         phase_acc += PHASE_ADD;             // Increment phase accumulator
 192   1      
 193   1      
 194   1         // Read the table value
 195   1         temp.u16 = *(table_ptr + (phase_acc >> 8));
 196   1      
 197   1         // Set the value of <temp> to the next output of DAC at full-scale
 198   1         // amplitude. The rails are 0x000 and 0xFFF. DAC low byte must be
 199   1         // written first.
 200   1      
 201   1         SFRPAGE = PG4_PAGE;
 202   1      
 203   1         DAC0L = temp.u8[LSB];
 204   1         DAC0H = temp.u8[MSB];
 205   1      
 206   1         DAC1L = temp.u8[LSB];
 207   1         DAC1H = temp.u8[MSB];
 208   1      
 209   1         SFRPAGE = SFRPAGE_save;
 210   1      
 211   1      }
 212          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    228    ----
   CONSTANT SIZE    =    512    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
