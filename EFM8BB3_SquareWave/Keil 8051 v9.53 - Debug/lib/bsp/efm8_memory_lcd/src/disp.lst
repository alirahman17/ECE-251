C51 COMPILER V9.53.0.0   DISP                                                              03/21/2017 23:26:34 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE DISP
OBJECT MODULE PLACED IN .\lib\bsp\efm8_memory_lcd\src\disp.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Ali Rah
                    -man\SimplicityStudio\v4_workspace\EFM8BB3_DAC_2\lib\bsp\efm8_memory_lcd\src\disp.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LAR
                    -GE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Ali Rah
                    -man\SimplicityStudio\v4_workspace\EFM8BB3_DAC_2\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Devic
                    -e/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\lib\bsp\e
                    -fm8_memory_lcd\src\disp.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\lib\bsp\efm8_memory_lcd\src\disp.OBJ)

line level    source

   1          /////////////////////////////////////////////////////////////////////////////
   2          // disp.c
   3          /////////////////////////////////////////////////////////////////////////////
   4          
   5          #include "bsp.h"
   6          #include "utils.h"
*** WARNING C318 IN LINE 6 OF C:\Users\Ali Rahman\SimplicityStudio\v4_workspace\EFM8BB3_DAC_2\lib\bsp\efm8_memory_lcd\sr
             -c\disp.c: can't open file 'utils.h'
   7          #include "spi.h"
*** WARNING C318 IN LINE 7 OF C:\Users\Ali Rahman\SimplicityStudio\v4_workspace\EFM8BB3_DAC_2\lib\bsp\efm8_memory_lcd\sr
             -c\disp.c: can't open file 'spi.h'
   8          #include "tick.h"
*** WARNING C318 IN LINE 8 OF C:\Users\Ali Rahman\SimplicityStudio\v4_workspace\EFM8BB3_DAC_2\lib\bsp\efm8_memory_lcd\sr
             -c\disp.c: can't open file 'tick.h'
   9          #include "disp.h"
*** WARNING C318 IN LINE 9 OF C:\Users\Ali Rahman\SimplicityStudio\v4_workspace\EFM8BB3_DAC_2\lib\bsp\efm8_memory_lcd\sr
             -c\disp.c: can't open file 'disp.h'
  10          #include <string.h>
  11          
  12          ////////////////////////////////////////////////////////////////////////
  13          // Display driver for Sharp LS013B7DH03 128x128 monochrome memory LCD //
  14          ////////////////////////////////////////////////////////////////////////
  15          
  16          /////////////////////////////////////////////////////////////////////////////
  17          // Globals
  18          /////////////////////////////////////////////////////////////////////////////
  19          
  20          uint16_t LastVcomToggle = 0;
  21          
  22          /////////////////////////////////////////////////////////////////////////////
  23          // Static Function Prototypes
  24          /////////////////////////////////////////////////////////////////////////////
  25          
  26          uint8_t BitReverse(uint8_t input);
  27          uint8_t SoftwareVcomToggle(uint8_t cmd);
  28          
  29          /////////////////////////////////////////////////////////////////////////////
  30          // Function
  31          /////////////////////////////////////////////////////////////////////////////
  32          
  33          /***************************************************************************//**
  34           * @brief Reverse the bit-endianess in a byte (bit 0 => bit 7, bit 1 => bit 6, etc)
  35           *
  36           * @param input A byte to reverse
  37           * @return The reversed byte
  38           *
  39           *****************************************************************************/
  40          uint8_t BitReverse(uint8_t input)
  41          {
  42   1          uint8_t output = input;
  43   1      
C51 COMPILER V9.53.0.0   DISP                                                              03/21/2017 23:26:34 PAGE 2   

  44   1          output = (output & 0xF0) >> 4 | (output & 0x0F) << 4;
  45   1          output = (output & 0xCC) >> 2 | (output & 0x33) << 2;
  46   1          output = (output & 0xAA) >> 1 | (output & 0x55) << 1;
  47   1      
  48   1          return output;
  49   1      }
  50          
  51          /***************************************************************************//**
  52           * @brief Toggle the software VCOM command bit at 5 Hz
  53           * @param cmd The display SPI command byte
  54           * @return The display SPI command byte with M1 toggled at 5 Hz
  55           *
  56           *****************************************************************************/
  57          uint8_t SoftwareVcomToggle(uint8_t cmd)
  58          {
  59   1          uint16_t tick = GetTickCount();
*** WARNING C206 IN LINE 59 OF C:\Users\Ali Rahman\SimplicityStudio\v4_workspace\EFM8BB3_DAC_2\lib\bsp\efm8_memory_lcd\s
             -rc\disp.c: 'GetTickCount': missing function-prototype
  60   1      
  61   1          if (tick - LastVcomToggle > HZ_TO_MS(DISP_VCOM_TOGGLE_RATE_HZ))
*** ERROR C202 IN LINE 61 OF C:\Users\Ali Rahman\SimplicityStudio\v4_workspace\EFM8BB3_DAC_2\lib\bsp\efm8_memory_lcd\src
             -\disp.c: 'DISP_VCOM_TOGGLE_RATE_HZ': undefined identifier
  62   1          {
  63   2              // Pulse software VCOM
  64   2              cmd |= DISP_CMD_VCOM_MASK;
*** ERROR C202 IN LINE 64 OF C:\Users\Ali Rahman\SimplicityStudio\v4_workspace\EFM8BB3_DAC_2\lib\bsp\efm8_memory_lcd\src
             -\disp.c: 'DISP_CMD_VCOM_MASK': undefined identifier
  65   2      
  66   2              LastVcomToggle = tick;
  67   2          }
  68   1      
  69   1          return cmd;
  70   1      }
  71          
  72          /***************************************************************************//**
  73           * @brief Initializes the display driver and clears the display
  74           *
  75           *****************************************************************************/
  76          void DISP_Init()
  77          {
  78   1          BSP_DISP_CS = SPI_CS_DEASSERT_LVL;
*** ERROR C202 IN LINE 78 OF C:\Users\Ali Rahman\SimplicityStudio\v4_workspace\EFM8BB3_DAC_2\lib\bsp\efm8_memory_lcd\src
             -\disp.c: 'SPI_CS_DEASSERT_LVL': undefined identifier
  79   1          BSP_DISP_EN = DISP_EN_EFM8;
*** ERROR C202 IN LINE 79 OF C:\Users\Ali Rahman\SimplicityStudio\v4_workspace\EFM8BB3_DAC_2\lib\bsp\efm8_memory_lcd\src
             -\disp.c: 'DISP_EN_EFM8': undefined identifier
  80   1      
  81   1          Wait(10);
  82   1      
  83   1          DISP_ClearAll();
  84   1      }
  85          
  86          /***************************************************************************//**
  87           * @brief Clear the display to the background color
  88           *
  89           *****************************************************************************/
  90          void DISP_ClearAll()
  91          {
  92   1      #if DISP_BACKGROUND_COLOR == COLOR_WHITE
*** WARNING C322 IN LINE 92 OF C:\Users\Ali Rahman\SimplicityStudio\v4_workspace\EFM8BB3_DAC_2\lib\bsp\efm8_memory_lcd\s
             -rc\disp.c: unknown identifier
*** WARNING C322 IN LINE 92 OF C:\Users\Ali Rahman\SimplicityStudio\v4_workspace\EFM8BB3_DAC_2\lib\bsp\efm8_memory_lcd\s
             -rc\disp.c: unknown identifier
C51 COMPILER V9.53.0.0   DISP                                                              03/21/2017 23:26:34 PAGE 3   

  93   1          uint8_t tx[2];
  94   1      
  95   1          tx[0] = SoftwareVcomToggle(DISP_CMD_CLEAR_ALL);
  96   1          tx[1] = DISP_CMD_DUMMY;
  97   1      
  98   1          SPI_StartTransfer(sizeof(tx));
  99   1          SPI_WriteQueue(tx, sizeof(tx));
 100   1      #else
                  uint8_t i;
              
                  for (i = 0; i < DISP_HEIGHT; i++)
                  {
                      DISP_ClearLine(i, COLOR_BLACK);
                  }
              #endif
 108   1      }
 109          
 110          /***************************************************************************//**
 111           * @brief Clear a single line
 112           *
 113           * @param row line to write (0 = top line; 127 = bottom line)
 114           * @param bw line color after clearing (0x00 = black; 0xFF = white)
 115           *
 116           *****************************************************************************/
 117          void DISP_ClearLine(uint8_t row, uint8_t bw)
 118          {
 119   1          uint8_t i;
 120   1          uint8_t cmd[DISP_BUF_SIZE + 4];
 121   1      
 122   1          if (bw)
 123   1          {
 124   2              bw = COLOR_WHITE;
 125   2          }
 126   1          else
 127   1          {
 128   2              bw = COLOR_BLACK;
 129   2          }
 130   1      
 131   1          // Send write command and line address
 132   1          cmd[0] = SoftwareVcomToggle(DISP_CMD_DYNAMIC_MODE);
 133   1          cmd[1] = BitReverse(row+1);
 134   1      
 135   1          // Send line data
 136   1          for (i = 0; i < DISP_BUF_SIZE; i++)
 137   1          {
 138   2            cmd[2 + i] = bw;
 139   2          }
 140   1      
 141   1          // Send dummy data
 142   1          cmd[DISP_BUF_SIZE + 2] = DISP_CMD_DUMMY;
 143   1          cmd[DISP_BUF_SIZE + 3] = DISP_CMD_DUMMY;
 144   1      
 145   1          // Send command
 146   1          SPI_StartTransfer(cmd, DISP_BUF_SIZE + 4);
 147   1      }
 148          
 149          /***************************************************************************//**
 150           * @brief Write a single line to the display
 151           *
 152           * @param row line to write (0 = top line; 127 = bottom line)
 153           * @param line pixel values
 154           *             (line[0] MSB = left-most pixel; line[15] LSB = right-most pixel)
 155           *             (set bit to '0' to turn pixel "on" (black))
C51 COMPILER V9.53.0.0   DISP                                                              03/21/2017 23:26:34 PAGE 4   

 156           *
 157           *****************************************************************************/
 158          void DISP_WriteLine(uint8_t row, uint8_t line[DISP_BUF_SIZE])
 159          {
 160   1          uint8_t cmd[DISP_BUF_SIZE + 4];
 161   1      
 162   1          // Send write command and line address
 163   1          cmd[0] = SoftwareVcomToggle(DISP_CMD_DYNAMIC_MODE);
 164   1          cmd[1] = BitReverse(row+1);
 165   1      
 166   1          memcpy(&cmd[2], line, DISP_BUF_SIZE);
 167   1      
 168   1          // Send dummy data
 169   1          cmd[DISP_BUF_SIZE + 2] = DISP_CMD_DUMMY;
 170   1          cmd[DISP_BUF_SIZE + 3] = DISP_CMD_DUMMY;
 171   1      
 172   1          // Send command
 173   1          SPI_StartTransfer(cmd, DISP_BUF_SIZE + 4);
 174   1      }

C51 COMPILATION COMPLETE.  7 WARNING(S),  4 ERROR(S)
