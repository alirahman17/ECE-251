C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/30/2017 21:54:29 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Ali Rah
                    -man\SimplicityStudio\v4_workspace\OPCODES\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOA
                    -TFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/Users/Ali%25252520Rahman/SimplicitySt
                    -udio/v4_workspace/OPCODES/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/shared/si8051base;C:
                    -/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\src\InitDevice.lst) COND PAGEWI
                    -DTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB3_Register_Enums.h>
  11          //#include "InitDevice.h"
  12          
  13          #ifndef __INIT_DEVICE_H__
  14          #define __INIT_DEVICE_H__
  15          
  16          // USER CONSTANTS
  17          // USER PROTOTYPES
  18          
  19          // $[Mode Transition Prototypes]
  20          extern void enter_DefaultMode_from_RESET(void);
  21          // [Mode Transition Prototypes]$
  22          
  23          // $[Config(Per-Module Mode)Transition Prototypes]
  24          extern void WDT_0_enter_DefaultMode_from_RESET(void);
  25          extern void PORTS_0_enter_DefaultMode_from_RESET(void);
  26          extern void PORTS_1_enter_DefaultMode_from_RESET(void);
  27          extern void PBCFG_0_enter_DefaultMode_from_RESET(void);
  28          extern void TIMER16_2_enter_DefaultMode_from_RESET(void);
  29          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void);
  30          // [Config(Per-Module Mode)Transition Prototypes]$
  31          
  32          
  33          #endif
  34          
  35          
  36          // USER PROTOTYPES
  37          // USER FUNCTIONS
  38          
  39          // $[Library Includes]
  40          // [Library Includes]$
  41          
  42          //==============================================================================
  43          // enter_DefaultMode_from_RESET
  44          //==============================================================================
  45          extern void enter_DefaultMode_from_RESET(void) {
  46   1              // $[Config Calls]
  47   1              // Save the SFRPAGE
  48   1              uint8_t SFRPAGE_save = SFRPAGE;
  49   1              WDT_0_enter_DefaultMode_from_RESET();
  50   1              PORTS_0_enter_DefaultMode_from_RESET();
  51   1              PORTS_1_enter_DefaultMode_from_RESET();
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/30/2017 21:54:29 PAGE 2   

  52   1              PBCFG_0_enter_DefaultMode_from_RESET();
  53   1              TIMER16_2_enter_DefaultMode_from_RESET();
  54   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  55   1              // Restore the SFRPAGE
  56   1              SFRPAGE = SFRPAGE_save;
  57   1              // [Config Calls]$
  58   1      
  59   1      }
  60          
  61          //================================================================================
  62          // WDT_0_enter_DefaultMode_from_RESET
  63          //================================================================================
  64          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  65   1              // $[WDTCN - Watchdog Timer Control]
  66   1              SFRPAGE = 0x00;
  67   1              //Disable Watchdog with key sequence
  68   1              WDTCN = 0xDE; //First key
  69   1              WDTCN = 0xAD; //Second key
  70   1              // [WDTCN - Watchdog Timer Control]$
  71   1      
  72   1      }
  73          
  74          //================================================================================
  75          // PORTS_0_enter_DefaultMode_from_RESET
  76          //================================================================================
  77          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  78   1              // $[P0 - Port 0 Pin Latch]
  79   1              // [P0 - Port 0 Pin Latch]$
  80   1      
  81   1              // $[P0MDOUT - Port 0 Output Mode]
  82   1              /***********************************************************************
  83   1               - P0.0 output is open-drain
  84   1               - P0.1 output is push-pull
  85   1               - P0.2 output is push-pull
  86   1               - P0.3 output is push-pull
  87   1               - P0.4 output is push-pull
  88   1               - P0.5 output is push-pull
  89   1               - P0.6 output is push-pull
  90   1               - P0.7 output is push-pull
  91   1               ***********************************************************************/
  92   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__PUSH_PULL
  93   1                              | P0MDOUT_B2__PUSH_PULL | P0MDOUT_B3__PUSH_PULL
  94   1                              | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__PUSH_PULL
  95   1                              | P0MDOUT_B6__PUSH_PULL | P0MDOUT_B7__PUSH_PULL;
  96   1              // [P0MDOUT - Port 0 Output Mode]$
  97   1      
  98   1              // $[P0MDIN - Port 0 Input Mode]
  99   1              // [P0MDIN - Port 0 Input Mode]$
 100   1      
 101   1              // $[P0SKIP - Port 0 Skip]
 102   1              /***********************************************************************
 103   1               - P0.0 pin is not skipped by the crossbar
 104   1               - P0.1 pin is skipped by the crossbar
 105   1               - P0.2 pin is skipped by the crossbar
 106   1               - P0.3 pin is skipped by the crossbar
 107   1               - P0.4 pin is skipped by the crossbar
 108   1               - P0.5 pin is skipped by the crossbar
 109   1               - P0.6 pin is skipped by the crossbar
 110   1               - P0.7 pin is skipped by the crossbar
 111   1               ***********************************************************************/
 112   1              P0SKIP = P0SKIP_B0__NOT_SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
 113   1                              | P0SKIP_B3__SKIPPED | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
 114   1                              | P0SKIP_B6__SKIPPED | P0SKIP_B7__SKIPPED;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/30/2017 21:54:29 PAGE 3   

 115   1              // [P0SKIP - Port 0 Skip]$
 116   1      
 117   1              // $[P0MASK - Port 0 Mask]
 118   1              // [P0MASK - Port 0 Mask]$
 119   1      
 120   1              // $[P0MAT - Port 0 Match]
 121   1              // [P0MAT - Port 0 Match]$
 122   1      
 123   1      }
 124          
 125          //================================================================================
 126          // PORTS_1_enter_DefaultMode_from_RESET
 127          //================================================================================
 128          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 129   1              // $[P1 - Port 1 Pin Latch]
 130   1              // [P1 - Port 1 Pin Latch]$
 131   1      
 132   1              // $[P1MDOUT - Port 1 Output Mode]
 133   1              /***********************************************************************
 134   1               - P1.0 output is open-drain
 135   1               - P1.1 output is open-drain
 136   1               - P1.2 output is open-drain
 137   1               - P1.3 output is open-drain
 138   1               - P1.4 output is push-pull
 139   1               - P1.5 output is push-pull
 140   1               - P1.6 output is push-pull
 141   1               - P1.7 output is open-drain
 142   1               ***********************************************************************/
 143   1              P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN
 144   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
 145   1                              | P1MDOUT_B4__PUSH_PULL | P1MDOUT_B5__PUSH_PULL
 146   1                              | P1MDOUT_B6__PUSH_PULL | P1MDOUT_B7__OPEN_DRAIN;
 147   1              // [P1MDOUT - Port 1 Output Mode]$
 148   1      
 149   1              // $[P1MDIN - Port 1 Input Mode]
 150   1              // [P1MDIN - Port 1 Input Mode]$
 151   1      
 152   1              // $[P1SKIP - Port 1 Skip]
 153   1              // [P1SKIP - Port 1 Skip]$
 154   1      
 155   1              // $[P1MASK - Port 1 Mask]
 156   1              // [P1MASK - Port 1 Mask]$
 157   1      
 158   1              // $[P1MAT - Port 1 Match]
 159   1              // [P1MAT - Port 1 Match]$
 160   1      
 161   1      }
 162          
 163          //================================================================================
 164          // PBCFG_0_enter_DefaultMode_from_RESET
 165          //================================================================================
 166          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 167   1              // $[XBR2 - Port I/O Crossbar 2]
 168   1              /***********************************************************************
 169   1               - Weak Pullups enabled 
 170   1               - Crossbar enabled
 171   1               - UART1 I/O unavailable at Port pin
 172   1               - UART1 RTS1 unavailable at Port pin
 173   1               - UART1 CTS1 unavailable at Port pin
 174   1               ***********************************************************************/
 175   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 176   1                              | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
 177   1                              | XBR2_URT1CTSE__DISABLED;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/30/2017 21:54:29 PAGE 4   

 178   1              // [XBR2 - Port I/O Crossbar 2]$
 179   1      
 180   1              // $[PRTDRV - Port Drive Strength]
 181   1              // [PRTDRV - Port Drive Strength]$
 182   1      
 183   1              // $[XBR0 - Port I/O Crossbar 0]
 184   1              // [XBR0 - Port I/O Crossbar 0]$
 185   1      
 186   1              // $[XBR1 - Port I/O Crossbar 1]
 187   1              // [XBR1 - Port I/O Crossbar 1]$
 188   1      
 189   1      }
 190          
 191          //================================================================================
 192          // TIMER16_2_enter_DefaultMode_from_RESET
 193          //================================================================================
 194          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 195   1              // $[Timer Initialization]
 196   1              // Save Timer Configuration
 197   1              uint8_t TMR2CN0_TR2_save;
 198   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 199   1              // Stop Timer
 200   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 201   1              // [Timer Initialization]$
 202   1      
 203   1              // $[TMR2CN1 - Timer 2 Control 1]
 204   1              // [TMR2CN1 - Timer 2 Control 1]$
 205   1      
 206   1              // $[TMR2CN0 - Timer 2 Control]
 207   1              // [TMR2CN0 - Timer 2 Control]$
 208   1      
 209   1              // $[TMR2H - Timer 2 High Byte]
 210   1              // [TMR2H - Timer 2 High Byte]$
 211   1      
 212   1              // $[TMR2L - Timer 2 Low Byte]
 213   1              // [TMR2L - Timer 2 Low Byte]$
 214   1      
 215   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 216   1              /***********************************************************************
 217   1               - Timer 2 Reload High Byte = 0x38
 218   1               ***********************************************************************/
 219   1              TMR2RLH = (0x38 << TMR2RLH_TMR2RLH__SHIFT);
 220   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 221   1      
 222   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 223   1              /***********************************************************************
 224   1               - Timer 2 Reload Low Byte = 0x9E
 225   1               ***********************************************************************/
 226   1              TMR2RLL = (0x9E << TMR2RLL_TMR2RLL__SHIFT);
 227   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 228   1      
 229   1              // $[TMR2CN0]
 230   1              /***********************************************************************
 231   1               - Start Timer 2 running
 232   1               ***********************************************************************/
 233   1              TMR2CN0 |= TMR2CN0_TR2__RUN;
 234   1              // [TMR2CN0]$
 235   1      
 236   1              // $[Timer Restoration]
 237   1              // Restore Timer Configuration
 238   1              TMR2CN0 |= TMR2CN0_TR2_save;
 239   1              // [Timer Restoration]$
 240   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/30/2017 21:54:29 PAGE 5   

 241   1      }
 242          
 243          //================================================================================
 244          // INTERRUPT_0_enter_DefaultMode_from_RESET
 245          //================================================================================
 246          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 247   1              // $[EIE1 - Extended Interrupt Enable 1]
 248   1              // [EIE1 - Extended Interrupt Enable 1]$
 249   1      
 250   1              // $[EIE2 - Extended Interrupt Enable 2]
 251   1              // [EIE2 - Extended Interrupt Enable 2]$
 252   1      
 253   1              // $[EIP1H - Extended Interrupt Priority 1 High]
 254   1              // [EIP1H - Extended Interrupt Priority 1 High]$
 255   1      
 256   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
 257   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
 258   1      
 259   1              // $[EIP2 - Extended Interrupt Priority 2]
 260   1              // [EIP2 - Extended Interrupt Priority 2]$
 261   1      
 262   1              // $[EIP2H - Extended Interrupt Priority 2 High]
 263   1              // [EIP2H - Extended Interrupt Priority 2 High]$
 264   1      
 265   1              // $[IE - Interrupt Enable]
 266   1              /***********************************************************************
 267   1               - Enable each interrupt according to its individual mask setting
 268   1               - Disable external interrupt 0
 269   1               - Disable external interrupt 1
 270   1               - Disable all SPI0 interrupts
 271   1               - Disable all Timer 0 interrupt
 272   1               - Disable all Timer 1 interrupt
 273   1               - Enable interrupt requests generated by the TF2L or TF2H flags
 274   1               - Disable UART0 interrupt
 275   1               ***********************************************************************/
 276   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 277   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 278   1                              | IE_ET2__ENABLED | IE_ES0__DISABLED;
 279   1              // [IE - Interrupt Enable]$
 280   1      
 281   1              // $[IP - Interrupt Priority]
 282   1              // [IP - Interrupt Priority]$
 283   1      
 284   1              // $[IPH - Interrupt Priority High]
 285   1              // [IPH - Interrupt Priority High]$
 286   1      
 287   1      }
 288          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     73    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/30/2017 21:54:29 PAGE 6   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
